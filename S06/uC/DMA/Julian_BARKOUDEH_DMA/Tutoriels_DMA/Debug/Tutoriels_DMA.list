
Tutoriels_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000edc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fcc  08000fcc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000fcc  08000fcc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fcc  08000fcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd0  08000fd0  00010fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  08000fd8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000fd8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bb9  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000069d  00000000  00000000  00021be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00022288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00022468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001164a  00000000  00000000  000225f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d29  00000000  00000000  00033c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005aaa3  00000000  00000000  00035963  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00090406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000540  00000000  00000000  00090484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000f84 	.word	0x08000f84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000f84 	.word	0x08000f84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
uint8_t console_rx_irq;
uint8_t rx_dma_buffer[8];
uint8_t rx_dma_irq = 0;

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	uint8_t index;
	// Configuration horloge du systeme : 48MHz avec 8MHz HSE
	SystemClock_Config();
 8000226:	f000 f861 	bl	80002ec <SystemClock_Config>
	// Initialisation USART pour console liaison serie
	BSP_Console_Init();
 800022a:	f000 fc47 	bl	8000abc <BSP_Console_Init>
	// test console : message accueil
	mon_printf("La Console est Ready!\r\n");
 800022e:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <main+0xb8>)
 8000230:	0018      	movs	r0, r3
 8000232:	f000 fb17 	bl	8000864 <mon_printf>
	// Initialiser le TIM6 pour generer une interruption toute les 1s
	BSP_TIMER_Timebase_Init();
 8000236:	f000 fd47 	bl	8000cc8 <BSP_TIMER_Timebase_Init>
	BSP_NVIC_Init();
 800023a:	f000 fd77 	bl	8000d2c <BSP_NVIC_Init>
	// boucle principeale des applications
	while(1)
	{
	// Faire toutes les 1s
	if (timebase_irq == 1)
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <main+0xbc>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d1fb      	bne.n	800023e <main+0x1e>
	{
		switch(rx_dma_irq)
 8000246:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <main+0xc0>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d002      	beq.n	8000254 <main+0x34>
 800024e:	2b02      	cmp	r3, #2
 8000250:	d01f      	beq.n	8000292 <main+0x72>
 8000252:	e03d      	b.n	80002d0 <main+0xb0>
		{
		case 1: // Une interruption de demi transfert (HT) s'est produite
		{
		// Affichage des octets [0-3] pour affichage sur la console de PC
		for (index=0; index<4; index++)
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	e012      	b.n	8000282 <main+0x62>
		{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <main+0xc4>)
 8000260:	69db      	ldr	r3, [r3, #28]
 8000262:	2240      	movs	r2, #64	; 0x40
 8000264:	4013      	ands	r3, r2
 8000266:	2b40      	cmp	r3, #64	; 0x40
 8000268:	d1f9      	bne.n	800025e <main+0x3e>
		USART2->TDR = rx_dma_buffer[index];
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <main+0xc8>)
 8000270:	5cd2      	ldrb	r2, [r2, r3]
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <main+0xc4>)
 8000274:	b292      	uxth	r2, r2
 8000276:	851a      	strh	r2, [r3, #40]	; 0x28
		for (index=0; index<4; index++)
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	3201      	adds	r2, #1
 8000280:	701a      	strb	r2, [r3, #0]
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b03      	cmp	r3, #3
 8000288:	d9e8      	bls.n	800025c <main+0x3c>
		}
		rx_dma_irq = 0;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <main+0xc0>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
		break;
 8000290:	e01e      	b.n	80002d0 <main+0xb0>
		}
		case 2: // interruption du transfert complet (TC) s'est produite
		{
		// // Envoi des octets [4-7] pour affichage sur la console de PC
		for (index=4; index<8; index++)
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	2204      	movs	r2, #4
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e012      	b.n	80002c0 <main+0xa0>
		{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <main+0xc4>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	2240      	movs	r2, #64	; 0x40
 80002a2:	4013      	ands	r3, r2
 80002a4:	2b40      	cmp	r3, #64	; 0x40
 80002a6:	d1f9      	bne.n	800029c <main+0x7c>
		USART2->TDR = rx_dma_buffer[index];
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <main+0xc8>)
 80002ae:	5cd2      	ldrb	r2, [r2, r3]
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <main+0xc4>)
 80002b2:	b292      	uxth	r2, r2
 80002b4:	851a      	strh	r2, [r3, #40]	; 0x28
		for (index=4; index<8; index++)
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781a      	ldrb	r2, [r3, #0]
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	3201      	adds	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b07      	cmp	r3, #7
 80002c6:	d9e8      	bls.n	800029a <main+0x7a>
		}
		rx_dma_irq = 0;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <main+0xc0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
		break;
 80002ce:	46c0      	nop			; (mov r8, r8)
		}
		}
		// reset du drapeau interruption TIM6
		timebase_irq = 0;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <main+0xbc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	if (timebase_irq == 1)
 80002d6:	e7b2      	b.n	800023e <main+0x1e>
 80002d8:	08000f9c 	.word	0x08000f9c
 80002dc:	20000021 	.word	0x20000021
 80002e0:	20000022 	.word	0x20000022
 80002e4:	40004400 	.word	0x40004400
 80002e8:	20000028 	.word	0x20000028

080002ec <SystemClock_Config>:
* HSE input Bypass Mode -> 8MHz
* SYSCLK, AHB, APB1 -> 48MHz
* PA8 as MCO with /16 prescaler -> 3MHz
*
*/
	static void SystemClock_Config() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
			uint32_t HSE_Status;
			uint32_t PLL_Status;
			uint32_t SW_Status;
			uint32_t timeout = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
			timeout = 1000000;
 80002f6:	4b63      	ldr	r3, [pc, #396]	; (8000484 <SystemClock_Config+0x198>)
 80002f8:	60fb      	str	r3, [r7, #12]
		// Start HSE in Bypass Mode
			RCC->CR |= RCC_CR_HSEBYP;
 80002fa:	4b63      	ldr	r3, [pc, #396]	; (8000488 <SystemClock_Config+0x19c>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b62      	ldr	r3, [pc, #392]	; (8000488 <SystemClock_Config+0x19c>)
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	02c9      	lsls	r1, r1, #11
 8000304:	430a      	orrs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
			RCC->CR |= RCC_CR_HSEON;
 8000308:	4b5f      	ldr	r3, [pc, #380]	; (8000488 <SystemClock_Config+0x19c>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b5e      	ldr	r3, [pc, #376]	; (8000488 <SystemClock_Config+0x19c>)
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	0249      	lsls	r1, r1, #9
 8000312:	430a      	orrs	r2, r1
 8000314:	601a      	str	r2, [r3, #0]
		// Wait until HSE is ready
			do
			{
				HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8000316:	4b5c      	ldr	r3, [pc, #368]	; (8000488 <SystemClock_Config+0x19c>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	029b      	lsls	r3, r3, #10
 800031e:	4013      	ands	r3, r2
 8000320:	60bb      	str	r3, [r7, #8]
				timeout--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b01      	subs	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]
			} while ((HSE_Status == 0) && (timeout > 0));
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d102      	bne.n	8000334 <SystemClock_Config+0x48>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f0      	bne.n	8000316 <SystemClock_Config+0x2a>
		// Select HSE as PLL input source
			RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8000334:	4b54      	ldr	r3, [pc, #336]	; (8000488 <SystemClock_Config+0x19c>)
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	4b53      	ldr	r3, [pc, #332]	; (8000488 <SystemClock_Config+0x19c>)
 800033a:	4954      	ldr	r1, [pc, #336]	; (800048c <SystemClock_Config+0x1a0>)
 800033c:	400a      	ands	r2, r1
 800033e:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8000340:	4b51      	ldr	r3, [pc, #324]	; (8000488 <SystemClock_Config+0x19c>)
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	4b50      	ldr	r3, [pc, #320]	; (8000488 <SystemClock_Config+0x19c>)
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	0249      	lsls	r1, r1, #9
 800034a:	430a      	orrs	r2, r1
 800034c:	605a      	str	r2, [r3, #4]
		// Set PLL PREDIV to /1 RCC->CFGR2 = 0x00000000;
		// Set PLL MUL to x6
			RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 800034e:	4b4e      	ldr	r3, [pc, #312]	; (8000488 <SystemClock_Config+0x19c>)
 8000350:	685a      	ldr	r2, [r3, #4]
 8000352:	4b4d      	ldr	r3, [pc, #308]	; (8000488 <SystemClock_Config+0x19c>)
 8000354:	494e      	ldr	r1, [pc, #312]	; (8000490 <SystemClock_Config+0x1a4>)
 8000356:	400a      	ands	r2, r1
 8000358:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 800035a:	4b4b      	ldr	r3, [pc, #300]	; (8000488 <SystemClock_Config+0x19c>)
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <SystemClock_Config+0x19c>)
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	0349      	lsls	r1, r1, #13
 8000364:	430a      	orrs	r2, r1
 8000366:	605a      	str	r2, [r3, #4]
		// Enable the main PLL
			RCC-> CR |= RCC_CR_PLLON;
 8000368:	4b47      	ldr	r3, [pc, #284]	; (8000488 <SystemClock_Config+0x19c>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b46      	ldr	r3, [pc, #280]	; (8000488 <SystemClock_Config+0x19c>)
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	0449      	lsls	r1, r1, #17
 8000372:	430a      	orrs	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
			// Wait until PLL is ready
			do
			{
				PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8000376:	4b44      	ldr	r3, [pc, #272]	; (8000488 <SystemClock_Config+0x19c>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	049b      	lsls	r3, r3, #18
 800037e:	4013      	ands	r3, r2
 8000380:	607b      	str	r3, [r7, #4]
				timeout--;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3b01      	subs	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
			} while ((PLL_Status == 0) && (timeout > 0));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d102      	bne.n	8000394 <SystemClock_Config+0xa8>
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f0      	bne.n	8000376 <SystemClock_Config+0x8a>
			// Set AHB prescaler to /1
			RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8000394:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <SystemClock_Config+0x19c>)
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <SystemClock_Config+0x19c>)
 800039a:	21f0      	movs	r1, #240	; 0xf0
 800039c:	438a      	bics	r2, r1
 800039e:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003a0:	4a39      	ldr	r2, [pc, #228]	; (8000488 <SystemClock_Config+0x19c>)
 80003a2:	4b39      	ldr	r3, [pc, #228]	; (8000488 <SystemClock_Config+0x19c>)
 80003a4:	6852      	ldr	r2, [r2, #4]
 80003a6:	605a      	str	r2, [r3, #4]
			//Set APB1 prescaler to /1
			RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <SystemClock_Config+0x19c>)
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <SystemClock_Config+0x19c>)
 80003ae:	4939      	ldr	r1, [pc, #228]	; (8000494 <SystemClock_Config+0x1a8>)
 80003b0:	400a      	ands	r2, r1
 80003b2:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <SystemClock_Config+0x19c>)
 80003b6:	4b34      	ldr	r3, [pc, #208]	; (8000488 <SystemClock_Config+0x19c>)
 80003b8:	6852      	ldr	r2, [r2, #4]
 80003ba:	605a      	str	r2, [r3, #4]
			// Enable FLASH Prefetch Buffer and set Flash Latency
			FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <SystemClock_Config+0x1ac>)
 80003be:	2211      	movs	r2, #17
 80003c0:	601a      	str	r2, [r3, #0]
			/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/ /* --- Switching to PLL at 48MHz Now! Fasten your seat belt! ---*/
			// Select the main PLL as system clock source
			RCC->CFGR &= ~RCC_CFGR_SW;
 80003c2:	4b31      	ldr	r3, [pc, #196]	; (8000488 <SystemClock_Config+0x19c>)
 80003c4:	685a      	ldr	r2, [r3, #4]
 80003c6:	4b30      	ldr	r3, [pc, #192]	; (8000488 <SystemClock_Config+0x19c>)
 80003c8:	2103      	movs	r1, #3
 80003ca:	438a      	bics	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <SystemClock_Config+0x19c>)
 80003d0:	685a      	ldr	r2, [r3, #4]
 80003d2:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <SystemClock_Config+0x19c>)
 80003d4:	2102      	movs	r1, #2
 80003d6:	430a      	orrs	r2, r1
 80003d8:	605a      	str	r2, [r3, #4]
			// Wait until PLL becomes main switch input
			do
			{
				SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk); timeout--;
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <SystemClock_Config+0x19c>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	220c      	movs	r2, #12
 80003e0:	4013      	ands	r3, r2
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
			} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2b08      	cmp	r3, #8
 80003ee:	d002      	beq.n	80003f6 <SystemClock_Config+0x10a>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f1      	bne.n	80003da <SystemClock_Config+0xee>

			/* --- Here we go! ---*/
			/*--- Use PA8 as MCO output at 48/16 = 3MHz ---*/
			// Set MCO source as SYSCLK (48MHz)
			RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 80003f6:	4b24      	ldr	r3, [pc, #144]	; (8000488 <SystemClock_Config+0x19c>)
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <SystemClock_Config+0x19c>)
 80003fc:	4927      	ldr	r1, [pc, #156]	; (800049c <SystemClock_Config+0x1b0>)
 80003fe:	400a      	ands	r2, r1
 8000400:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= RCC_CFGR_MCOSEL_SYSCLK;
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <SystemClock_Config+0x19c>)
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <SystemClock_Config+0x19c>)
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	04c9      	lsls	r1, r1, #19
 800040c:	430a      	orrs	r2, r1
 800040e:	605a      	str	r2, [r3, #4]
			// Set MCO prescaler to /16 -> 3MHz
			RCC->CFGR &= ~RCC_CFGR_MCOPRE_Msk;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <SystemClock_Config+0x19c>)
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <SystemClock_Config+0x19c>)
 8000416:	4922      	ldr	r1, [pc, #136]	; (80004a0 <SystemClock_Config+0x1b4>)
 8000418:	400a      	ands	r2, r1
 800041a:	605a      	str	r2, [r3, #4]
			RCC->CFGR |= RCC_CFGR_MCOPRE_DIV16;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <SystemClock_Config+0x19c>)
 800041e:	685a      	ldr	r2, [r3, #4]
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <SystemClock_Config+0x19c>)
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	05c9      	lsls	r1, r1, #23
 8000426:	430a      	orrs	r2, r1
 8000428:	605a      	str	r2, [r3, #4]
			// Enable GPIOA clock
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <SystemClock_Config+0x19c>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <SystemClock_Config+0x19c>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
			// Configure PA8 as Alternate function
			GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 8000438:	2390      	movs	r3, #144	; 0x90
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	4918      	ldr	r1, [pc, #96]	; (80004a4 <SystemClock_Config+0x1b8>)
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0289      	lsls	r1, r1, #10
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
			// Set to AF0 (MCO output)
			GPIOA->AFR[1] &= ~(0x0000000F);
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	210f      	movs	r1, #15
 8000466:	438a      	bics	r2, r1
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOA->AFR[1] |= (0x00000000);
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05da      	lsls	r2, r3, #23
 800046e:	2390      	movs	r3, #144	; 0x90
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
			SystemCoreClockUpdate();
 8000476:	f000 fce1 	bl	8000e3c <SystemCoreClockUpdate>
		}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b004      	add	sp, #16
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	000f4240 	.word	0x000f4240
 8000488:	40021000 	.word	0x40021000
 800048c:	fffe7fff 	.word	0xfffe7fff
 8000490:	ffc3ffff 	.word	0xffc3ffff
 8000494:	fffff8ff 	.word	0xfffff8ff
 8000498:	40022000 	.word	0x40022000
 800049c:	f0ffffff 	.word	0xf0ffffff
 80004a0:	8fffffff 	.word	0x8fffffff
 80004a4:	fffcffff 	.word	0xfffcffff

080004a8 <printchar>:
#define putchar(c) outbyte(c)
*/
#include "stm32f0xx.h"
#include <stdarg.h>
static void printchar(char **str, int c)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);
	if (str)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00a      	beq.n	80004ce <printchar+0x26>
	{
		**str = c;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	701a      	strb	r2, [r3, #0]
		++(*str);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	601a      	str	r2, [r3, #0]
		while ((USART2->ISR & (1<<6)) != (1<<6));
		// arriver ici = buffer vide, on peut envoyer une data
		// envoi du caractere
		USART2->TDR = c;
	}
}
 80004cc:	e00a      	b.n	80004e4 <printchar+0x3c>
		while ((USART2->ISR & (1<<6)) != (1<<6));
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <printchar+0x44>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	4013      	ands	r3, r2
 80004d8:	2b40      	cmp	r3, #64	; 0x40
 80004da:	d1f9      	bne.n	80004d0 <printchar+0x28>
		USART2->TDR = c;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <printchar+0x44>)
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	b292      	uxth	r2, r2
 80004e2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b002      	add	sp, #8
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40004400 	.word	0x40004400

080004f0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6178      	str	r0, [r7, #20]
 80004f8:	6139      	str	r1, [r7, #16]
 80004fa:	60fa      	str	r2, [r7, #12]
 80004fc:	60bb      	str	r3, [r7, #8]
	register int pc = 0, padchar = ' ';
 80004fe:	2400      	movs	r4, #0
 8000500:	2320      	movs	r3, #32
 8000502:	607b      	str	r3, [r7, #4]

	if (width > 0) {
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd16      	ble.n	8000538 <prints+0x48>
		register int len = 0;
 800050a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800050c:	693e      	ldr	r6, [r7, #16]
 800050e:	e001      	b.n	8000514 <prints+0x24>
 8000510:	3501      	adds	r5, #1
 8000512:	3601      	adds	r6, #1
 8000514:	7833      	ldrb	r3, [r6, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1fa      	bne.n	8000510 <prints+0x20>
		if (len >= width) width = 0;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	429d      	cmp	r5, r3
 800051e:	db02      	blt.n	8000526 <prints+0x36>
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e002      	b.n	800052c <prints+0x3c>
		else width -= len;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	1b5b      	subs	r3, r3, r5
 800052a:	60fb      	str	r3, [r7, #12]
		if (pad & PAD_ZERO) padchar = '0';
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2202      	movs	r2, #2
 8000530:	4013      	ands	r3, r2
 8000532:	d001      	beq.n	8000538 <prints+0x48>
 8000534:	2330      	movs	r3, #48	; 0x30
 8000536:	607b      	str	r3, [r7, #4]
	}
	if (!(pad & PAD_RIGHT)) {
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	d119      	bne.n	8000574 <prints+0x84>
		for ( ; width > 0; --width) {
 8000540:	e008      	b.n	8000554 <prints+0x64>
			printchar (out, padchar);
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ffae 	bl	80004a8 <printchar>
			++pc;
 800054c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3b01      	subs	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dcf3      	bgt.n	8000542 <prints+0x52>
		}
	}
	for ( ; *string ; ++string) {
 800055a:	e00b      	b.n	8000574 <prints+0x84>
		printchar (out, *string);
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	001a      	movs	r2, r3
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff9e 	bl	80004a8 <printchar>
		++pc;
 800056c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	3301      	adds	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1ef      	bne.n	800055c <prints+0x6c>
	}
	for ( ; width > 0; --width) {
 800057c:	e008      	b.n	8000590 <prints+0xa0>
		printchar (out, padchar);
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff90 	bl	80004a8 <printchar>
		++pc;
 8000588:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3b01      	subs	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dcf3      	bgt.n	800057e <prints+0x8e>
	}

	return pc;
 8000596:	0023      	movs	r3, r4
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	b007      	add	sp, #28
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005a0 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	46c6      	mov	lr, r8
 80005a4:	b500      	push	{lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6178      	str	r0, [r7, #20]
 80005ac:	6139      	str	r1, [r7, #16]
 80005ae:	60fa      	str	r2, [r7, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	4698      	mov	r8, r3
 80005b6:	2500      	movs	r5, #0
	register unsigned int u = i;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	607b      	str	r3, [r7, #4]

	if (i == 0) {
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d114      	bne.n	80005ec <printi+0x4c>
		print_buf[0] = '0';
 80005c2:	2114      	movs	r1, #20
 80005c4:	2008      	movs	r0, #8
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	185b      	adds	r3, r3, r1
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80005ce:	183b      	adds	r3, r7, r0
 80005d0:	185b      	adds	r3, r3, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80005d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80005da:	2008      	movs	r0, #8
 80005dc:	4684      	mov	ip, r0
 80005de:	44bc      	add	ip, r7
 80005e0:	4461      	add	r1, ip
 80005e2:	6978      	ldr	r0, [r7, #20]
 80005e4:	f7ff ff84 	bl	80004f0 <prints>
 80005e8:	0003      	movs	r3, r0
 80005ea:	e04f      	b.n	800068c <printi+0xec>
	}

	if (sg && b == 10 && i < 0) {
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00a      	beq.n	8000608 <printi+0x68>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d107      	bne.n	8000608 <printi+0x68>
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da04      	bge.n	8000608 <printi+0x68>
		neg = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	4698      	mov	r8, r3
		u = -i;
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	425b      	negs	r3, r3
 8000606:	607b      	str	r3, [r7, #4]
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000608:	2314      	movs	r3, #20
 800060a:	2208      	movs	r2, #8
 800060c:	18ba      	adds	r2, r7, r2
 800060e:	18d4      	adds	r4, r2, r3
 8000610:	340b      	adds	r4, #11
	*s = '\0';
 8000612:	2300      	movs	r3, #0
 8000614:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000616:	e017      	b.n	8000648 <printi+0xa8>
		t = u % b;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	0019      	movs	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fdf9 	bl	8000214 <__aeabi_uidivmod>
 8000622:	000b      	movs	r3, r1
 8000624:	001e      	movs	r6, r3
		if( t >= 10 )
 8000626:	2e09      	cmp	r6, #9
 8000628:	dd02      	ble.n	8000630 <printi+0x90>
			t += letbase - '0' - 10;
 800062a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800062c:	3b3a      	subs	r3, #58	; 0x3a
 800062e:	18f6      	adds	r6, r6, r3
		*--s = t + '0';
 8000630:	b2f3      	uxtb	r3, r6
 8000632:	3c01      	subs	r4, #1
 8000634:	3330      	adds	r3, #48	; 0x30
 8000636:	b2db      	uxtb	r3, r3
 8000638:	7023      	strb	r3, [r4, #0]
		u /= b;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	0019      	movs	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	607b      	str	r3, [r7, #4]
	while (u) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e4      	bne.n	8000618 <printi+0x78>
	}

	if (neg) {
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d013      	beq.n	800067c <printi+0xdc>
		if( width && (pad & PAD_ZERO) ) {
 8000654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00d      	beq.n	8000676 <printi+0xd6>
 800065a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800065c:	2202      	movs	r2, #2
 800065e:	4013      	ands	r3, r2
 8000660:	d009      	beq.n	8000676 <printi+0xd6>
			printchar (out, '-');
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	212d      	movs	r1, #45	; 0x2d
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff1e 	bl	80004a8 <printchar>
			++pc;
 800066c:	3501      	adds	r5, #1
			--width;
 800066e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000670:	3b01      	subs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
 8000674:	e002      	b.n	800067c <printi+0xdc>
		}
		else {
			*--s = '-';
 8000676:	3c01      	subs	r4, #1
 8000678:	232d      	movs	r3, #45	; 0x2d
 800067a:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800067c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800067e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000680:	6978      	ldr	r0, [r7, #20]
 8000682:	0021      	movs	r1, r4
 8000684:	f7ff ff34 	bl	80004f0 <prints>
 8000688:	0003      	movs	r3, r0
 800068a:	18eb      	adds	r3, r5, r3
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b00a      	add	sp, #40	; 0x28
 8000692:	bc04      	pop	{r2}
 8000694:	4690      	mov	r8, r2
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000698 <print>:

static int print(char **out, const char *format, va_list args )
{
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b08b      	sub	sp, #44	; 0x2c
 800069c:	af04      	add	r7, sp, #16
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80006a4:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80006a6:	e0c7      	b.n	8000838 <print+0x1a0>
		if (*format == '%') {
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b25      	cmp	r3, #37	; 0x25
 80006ae:	d000      	beq.n	80006b2 <print+0x1a>
 80006b0:	e0b3      	b.n	800081a <print+0x182>
			++format;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80006b8:	2600      	movs	r6, #0
 80006ba:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d100      	bne.n	80006c6 <print+0x2e>
 80006c4:	e0be      	b.n	8000844 <print+0x1ac>
			if (*format == '%') goto out;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b25      	cmp	r3, #37	; 0x25
 80006cc:	d100      	bne.n	80006d0 <print+0x38>
 80006ce:	e0a6      	b.n	800081e <print+0x186>
			if (*format == '-') {
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b2d      	cmp	r3, #45	; 0x2d
 80006d6:	d10a      	bne.n	80006ee <print+0x56>
				++format;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80006de:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80006e0:	e005      	b.n	80006ee <print+0x56>
				++format;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80006e8:	2302      	movs	r3, #2
 80006ea:	4333      	orrs	r3, r6
 80006ec:	001e      	movs	r6, r3
			while (*format == '0') {
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b30      	cmp	r3, #48	; 0x30
 80006f4:	d0f5      	beq.n	80006e2 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80006f6:	e00b      	b.n	8000710 <print+0x78>
				width *= 10;
 80006f8:	002b      	movs	r3, r5
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	195b      	adds	r3, r3, r5
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	001d      	movs	r5, r3
				width += *format - '0';
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3b30      	subs	r3, #48	; 0x30
 8000708:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3301      	adds	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b2f      	cmp	r3, #47	; 0x2f
 8000716:	d903      	bls.n	8000720 <print+0x88>
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b39      	cmp	r3, #57	; 0x39
 800071e:	d9eb      	bls.n	80006f8 <print+0x60>
			}
			if( *format == 's' ) {
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b73      	cmp	r3, #115	; 0x73
 8000726:	d110      	bne.n	800074a <print+0xb2>
				register char *s = (char *)va_arg( args, int );
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1d1a      	adds	r2, r3, #4
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <print+0xa0>
 8000734:	0019      	movs	r1, r3
 8000736:	e000      	b.n	800073a <print+0xa2>
 8000738:	4949      	ldr	r1, [pc, #292]	; (8000860 <print+0x1c8>)
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	0033      	movs	r3, r6
 800073e:	002a      	movs	r2, r5
 8000740:	f7ff fed6 	bl	80004f0 <prints>
 8000744:	0003      	movs	r3, r0
 8000746:	18e4      	adds	r4, r4, r3
				continue;
 8000748:	e073      	b.n	8000832 <print+0x19a>
			}
			if( *format == 'd' ) {
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b64      	cmp	r3, #100	; 0x64
 8000750:	d10f      	bne.n	8000772 <print+0xda>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1d1a      	adds	r2, r3, #4
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	6819      	ldr	r1, [r3, #0]
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	2361      	movs	r3, #97	; 0x61
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	9601      	str	r6, [sp, #4]
 8000762:	9500      	str	r5, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	220a      	movs	r2, #10
 8000768:	f7ff ff1a 	bl	80005a0 <printi>
 800076c:	0003      	movs	r3, r0
 800076e:	18e4      	adds	r4, r4, r3
				continue;
 8000770:	e05f      	b.n	8000832 <print+0x19a>
			}
			if( *format == 'x' ) {
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b78      	cmp	r3, #120	; 0x78
 8000778:	d10f      	bne.n	800079a <print+0x102>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1d1a      	adds	r2, r3, #4
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	6819      	ldr	r1, [r3, #0]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	2361      	movs	r3, #97	; 0x61
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	9601      	str	r6, [sp, #4]
 800078a:	9500      	str	r5, [sp, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2210      	movs	r2, #16
 8000790:	f7ff ff06 	bl	80005a0 <printi>
 8000794:	0003      	movs	r3, r0
 8000796:	18e4      	adds	r4, r4, r3
				continue;
 8000798:	e04b      	b.n	8000832 <print+0x19a>
			}
			if( *format == 'X' ) {
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b58      	cmp	r3, #88	; 0x58
 80007a0:	d10f      	bne.n	80007c2 <print+0x12a>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1d1a      	adds	r2, r3, #4
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	2341      	movs	r3, #65	; 0x41
 80007ae:	9302      	str	r3, [sp, #8]
 80007b0:	9601      	str	r6, [sp, #4]
 80007b2:	9500      	str	r5, [sp, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	2210      	movs	r2, #16
 80007b8:	f7ff fef2 	bl	80005a0 <printi>
 80007bc:	0003      	movs	r3, r0
 80007be:	18e4      	adds	r4, r4, r3
				continue;
 80007c0:	e037      	b.n	8000832 <print+0x19a>
			}
			if( *format == 'u' ) {
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b75      	cmp	r3, #117	; 0x75
 80007c8:	d10f      	bne.n	80007ea <print+0x152>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1d1a      	adds	r2, r3, #4
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	2361      	movs	r3, #97	; 0x61
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	9601      	str	r6, [sp, #4]
 80007da:	9500      	str	r5, [sp, #0]
 80007dc:	2300      	movs	r3, #0
 80007de:	220a      	movs	r2, #10
 80007e0:	f7ff fede 	bl	80005a0 <printi>
 80007e4:	0003      	movs	r3, r0
 80007e6:	18e4      	adds	r4, r4, r3
				continue;
 80007e8:	e023      	b.n	8000832 <print+0x19a>
			}
			if( *format == 'c' ) {
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b63      	cmp	r3, #99	; 0x63
 80007f0:	d11f      	bne.n	8000832 <print+0x19a>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1d1a      	adds	r2, r3, #4
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	2114      	movs	r1, #20
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8000808:	1879      	adds	r1, r7, r1
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	0033      	movs	r3, r6
 800080e:	002a      	movs	r2, r5
 8000810:	f7ff fe6e 	bl	80004f0 <prints>
 8000814:	0003      	movs	r3, r0
 8000816:	18e4      	adds	r4, r4, r3
				continue;
 8000818:	e00b      	b.n	8000832 <print+0x19a>
			}
		}
		else {
		out:
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	e000      	b.n	8000820 <print+0x188>
			if (*format == '%') goto out;
 800081e:	46c0      	nop			; (mov r8, r8)
			printchar (out, *format);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fe3c 	bl	80004a8 <printchar>
			++pc;
 8000830:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3301      	adds	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d000      	beq.n	8000842 <print+0x1aa>
 8000840:	e732      	b.n	80006a8 <print+0x10>
 8000842:	e000      	b.n	8000846 <print+0x1ae>
			if (*format == '\0') break;
 8000844:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <print+0x1bc>
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000854:	0023      	movs	r3, r4
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b007      	add	sp, #28
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	08000fb4 	.word	0x08000fb4

08000864 <mon_printf>:

int mon_printf(const char *format, ...)
{
 8000864:	b40f      	push	{r0, r1, r2, r3}
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 800086c:	2314      	movs	r3, #20
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	0019      	movs	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff0d 	bl	8000698 <print>
 800087e:	0003      	movs	r3, r0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bc80      	pop	{r7}
 8000888:	bc08      	pop	{r3}
 800088a:	b004      	add	sp, #16
 800088c:	4718      	bx	r3

0800088e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800089c:	e7fe      	b.n	800089c <HardFault_Handler+0x4>

0800089e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <EXTI4_15_IRQHandler>:
* This function handles EXTI line 13 interrupt request.
*/
extern uint8_t button_irq;
extern uint8_t button_irq;
void EXTI4_15_IRQHandler()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	// Verifiver si cest PC13 (Ligne 13) qui a declencher interruption
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <EXTI4_15_IRQHandler+0x24>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	4013      	ands	r3, r2
 80008ca:	d006      	beq.n	80008da <EXTI4_15_IRQHandler+0x1e>
	{
		// Acquitter ou valider la demande interruption
		// Reset du drapeau en ecrivant '1' sur le bit b13 de EXTI_PR
		EXTI->PR = EXTI_PR_PR13;
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <EXTI4_15_IRQHandler+0x24>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	615a      	str	r2, [r3, #20]
		// Tache a realiser

		//V1
		button_irq=1;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <EXTI4_15_IRQHandler+0x28>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]

		//V2
		//button_irq++;
	}
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010400 	.word	0x40010400
 80008e4:	20000020 	.word	0x20000020

080008e8 <TIM6_DAC_IRQHandler>:
/*
* This function handles TIM6 interrupts
*/
extern uint8_t timebase_irq;
void TIM6_DAC_IRQHandler()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	// Verifier que cest le debordement de Timer TIM6 qui a declencher interruption
	if ((TIM6->SR & TIM_SR_UIF) == TIM_SR_UIF)
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	2201      	movs	r2, #1
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d108      	bne.n	800090a <TIM6_DAC_IRQHandler+0x22>
	{
		// CAcquitter ou valider la demande interruption
		TIM6->SR &= ~TIM_SR_UIF;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 80008fe:	2101      	movs	r1, #1
 8000900:	438a      	bics	r2, r1
 8000902:	611a      	str	r2, [r3, #16]
		// Tache a realiser
		timebase_irq = 1;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <TIM6_DAC_IRQHandler+0x2c>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
	}
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40001000 	.word	0x40001000
 8000914:	20000021 	.word	0x20000021

08000918 <USART2_IRQHandler>:
* This function handles USART2 interrupts
*/
extern uint8_t console_rx_byte;
extern uint8_t console_rx_irq;
void USART2_IRQHandler()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	// Test pour verifier si la demande vient de RXNE
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <USART2_IRQHandler+0x28>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	2220      	movs	r2, #32
 8000922:	4013      	ands	r3, r2
 8000924:	2b20      	cmp	r3, #32
 8000926:	d108      	bne.n	800093a <USART2_IRQHandler+0x22>
	{
		// Le drapeau RXNE est automatiquement remis a ZERO si lecture de RDR.
		// Lecture et sauvegarde du caractere
		console_rx_byte = USART2->RDR;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <USART2_IRQHandler+0x28>)
 800092a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <USART2_IRQHandler+0x2c>)
 8000932:	701a      	strb	r2, [r3, #0]
		// signalement de lecture : synchronisation avec le main
		console_rx_irq = 1;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <USART2_IRQHandler+0x30>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
	}
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40004400 	.word	0x40004400
 8000944:	20000030 	.word	0x20000030
 8000948:	20000024 	.word	0x20000024

0800094c <DMA1_Channel4_5_6_7_IRQHandler>:
/*
* Cette fonction declencler surles interruptions du canal 5 du DMA1 (USART2 RX).
*/
extern uint8_t rx_dma_irq;
void DMA1_Channel4_5_6_7_IRQHandler()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	// Test pour le demi-transfert du canal 5
	if ((DMA1->ISR & DMA_ISR_HTIF5) == DMA_ISR_HTIF5)
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	02db      	lsls	r3, r3, #11
 8000958:	401a      	ands	r2, r3
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	02db      	lsls	r3, r3, #11
 800095e:	429a      	cmp	r2, r3
 8000960:	d109      	bne.n	8000976 <DMA1_Channel4_5_6_7_IRQHandler+0x2a>
	{
	// Effacer le bit ou drapeau d'interruption en attente
	DMA1->IFCR |= DMA_IFCR_CHTIF5;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	02c9      	lsls	r1, r1, #11
 800096c:	430a      	orrs	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
	// Definir une variable globale
	rx_dma_irq = 1;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <DMA1_Channel4_5_6_7_IRQHandler+0x5c>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
	}
	// Test pour le transfert du canal 5 terminé
	if ((DMA1->ISR & DMA_ISR_TCIF5) == DMA_ISR_TCIF5)
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	029b      	lsls	r3, r3, #10
 800097e:	401a      	ands	r2, r3
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	029b      	lsls	r3, r3, #10
 8000984:	429a      	cmp	r2, r3
 8000986:	d109      	bne.n	800099c <DMA1_Channel4_5_6_7_IRQHandler+0x50>
	{
	// Effacer le bit d'interruption en attente
	DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x58>)
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	0289      	lsls	r1, r1, #10
 8000992:	430a      	orrs	r2, r1
 8000994:	605a      	str	r2, [r3, #4]
	// Definir une variable globale
	rx_dma_irq = 2;
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <DMA1_Channel4_5_6_7_IRQHandler+0x5c>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
	}
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20000022 	.word	0x20000022

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b7f      	cmp	r3, #127	; 0x7f
 80009be:	d809      	bhi.n	80009d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	001a      	movs	r2, r3
 80009c6:	231f      	movs	r3, #31
 80009c8:	401a      	ands	r2, r3
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_EnableIRQ+0x30>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	4091      	lsls	r1, r2
 80009d0:	000a      	movs	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]
  }
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
 80009f4:	d828      	bhi.n	8000a48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	33c0      	adds	r3, #192	; 0xc0
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	589b      	ldr	r3, [r3, r2]
 8000a06:	1dfa      	adds	r2, r7, #7
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	400a      	ands	r2, r1
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	21ff      	movs	r1, #255	; 0xff
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	401a      	ands	r2, r3
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4003      	ands	r3, r0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	33c0      	adds	r3, #192	; 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a46:	e031      	b.n	8000aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0019      	movs	r1, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	400b      	ands	r3, r1
 8000a54:	3b08      	subs	r3, #8
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3306      	adds	r3, #6
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1dfa      	adds	r2, r7, #7
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	0011      	movs	r1, r2
 8000a68:	2203      	movs	r2, #3
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	21ff      	movs	r1, #255	; 0xff
 8000a70:	4091      	lsls	r1, r2
 8000a72:	000a      	movs	r2, r1
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	401a      	ands	r2, r3
 8000a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	401a      	ands	r2, r3
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0018      	movs	r0, r3
 8000a88:	2303      	movs	r3, #3
 8000a8a:	4003      	ands	r3, r0
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	001c      	movs	r4, r3
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	18c3      	adds	r3, r0, r3
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <BSP_Console_Init>:
* RX -> PA3 (AF1)
*/

extern uint8_t rx_dma_buffer[8];
void BSP_Console_Init()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	//activer horloge du peripherique GPIOA
	// mettre le bit b17 du registre RCC_AHBENR a '1'
	// voir page 128 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	// le bit b17 de RCC_AHBENR est egalement defini = RCC_AHBENR_GPIOAEN dans le fichier stm32f0xx.h
	RCC->AHBENR |= (1<<17); // ou RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000ac0:	4b73      	ldr	r3, [pc, #460]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	4b72      	ldr	r3, [pc, #456]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0289      	lsls	r1, r1, #10
 8000aca:	430a      	orrs	r2, r1
 8000acc:	615a      	str	r2, [r3, #20]
	// Choisir le mode Alternate Function (AF) pour les broches PA2 et PA3
	// pour PA2 : ecrire "10" sur les bits b5b4 du registre GPIOA_MODER
	GPIOA->MODER |=(1<<5);
 8000ace:	2390      	movs	r3, #144	; 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2390      	movs	r3, #144	; 0x90
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	2120      	movs	r1, #32
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &=~(1<<4);
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2390      	movs	r3, #144	; 0x90
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	2110      	movs	r1, #16
 8000aea:	438a      	bics	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
	// pour PA3 : ecrire "10" sur les bits b7b6 du registre GPIOA_MODER
	GPIOA->MODER |=(1<<7);
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2390      	movs	r3, #144	; 0x90
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &=~(1<<6);
 8000afe:	2390      	movs	r3, #144	; 0x90
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2390      	movs	r3, #144	; 0x90
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
	// Choisir la fonction AF1 (USART2) pour les broches PA2 et PA3
	// pour PA2 : ecrire "0001" sur les bits b11b10b9b8 du registre GPIOA_AFRL = GPIO->AFR[0]
	GPIOA->AFR[0] &= ~(1<<11);
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	6a1a      	ldr	r2, [r3, #32]
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	495e      	ldr	r1, [pc, #376]	; (8000c94 <BSP_Console_Init+0x1d8>)
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<10);
 8000b1e:	2390      	movs	r3, #144	; 0x90
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	6a1a      	ldr	r2, [r3, #32]
 8000b24:	2390      	movs	r3, #144	; 0x90
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	495b      	ldr	r1, [pc, #364]	; (8000c98 <BSP_Console_Init+0x1dc>)
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<9);
 8000b2e:	2390      	movs	r3, #144	; 0x90
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	6a1a      	ldr	r2, [r3, #32]
 8000b34:	2390      	movs	r3, #144	; 0x90
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	4958      	ldr	r1, [pc, #352]	; (8000c9c <BSP_Console_Init+0x1e0>)
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1<<8);
 8000b3e:	2390      	movs	r3, #144	; 0x90
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	6a1a      	ldr	r2, [r3, #32]
 8000b44:	2390      	movs	r3, #144	; 0x90
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0049      	lsls	r1, r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	621a      	str	r2, [r3, #32]
	// Choisir la fonction AF1 (USART2) pour les broches PA2 et PA3
	// pour PA3 : ecrire "0001" sur les bits b15b14b13b12 du registre GPIOA_AFRL = GPIO->AFR[0]
	GPIOA->AFR[0] &= ~(1<<15);
 8000b50:	2390      	movs	r3, #144	; 0x90
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	6a1a      	ldr	r2, [r3, #32]
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	4951      	ldr	r1, [pc, #324]	; (8000ca0 <BSP_Console_Init+0x1e4>)
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<14);
 8000b60:	2390      	movs	r3, #144	; 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	2390      	movs	r3, #144	; 0x90
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	494e      	ldr	r1, [pc, #312]	; (8000ca4 <BSP_Console_Init+0x1e8>)
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<13);
 8000b70:	2390      	movs	r3, #144	; 0x90
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	6a1a      	ldr	r2, [r3, #32]
 8000b76:	2390      	movs	r3, #144	; 0x90
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	494b      	ldr	r1, [pc, #300]	; (8000ca8 <BSP_Console_Init+0x1ec>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1<<12);
 8000b80:	2390      	movs	r3, #144	; 0x90
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	6a1a      	ldr	r2, [r3, #32]
 8000b86:	2390      	movs	r3, #144	; 0x90
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0149      	lsls	r1, r1, #5
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	621a      	str	r2, [r3, #32]
	//activer horloge du peripherique USART2
	// mettre '1' le bit b17 du registre (RCC_APB1ENR)
	// voir page 131 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	RCC -> APB1ENR |= (1<<17);
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
	// On utilise les valeurs par defaut
	// 8-bits de donnees
	// 1 bit START
	// 1 bit STOP
	// desactivation de CTS/RTS
	USART2->CR1 = 0x00000000;
 8000ba0:	4b42      	ldr	r3, [pc, #264]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8000ba6:	4b41      	ldr	r3, [pc, #260]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8000bac:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
	// Choisir la source PCLK (APB1) comme source horloge de USART2 : Valeur par defaut
	// PCLK -> 48 MHz
	// mettre "00" sur les bits b17b16 du registre (RCC_CFGR3)
	// voir page 140 du reference manual
	RCC->CFGR3 &= ~(1<<17);
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb6:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bb8:	493d      	ldr	r1, [pc, #244]	; (8000cb0 <BSP_Console_Init+0x1f4>)
 8000bba:	400a      	ands	r2, r1
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->CFGR3 &= ~(1<<16);
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bc4:	493b      	ldr	r1, [pc, #236]	; (8000cb4 <BSP_Console_Init+0x1f8>)
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% erreur
	// avec oversampling 8 bits (OVER8=1) and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (Meilleur choix)
	// choix oversampling 8 bits (OVER8=1)
	// mettre a '1' le bit b15 de USART2_CR1
	USART2->CR1 |= (1<<15);
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0209      	lsls	r1, r1, #8
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
	// ecrire la valeur du Baud Rate dans le registre USART2_BRR
	USART2->BRR = 833;
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <BSP_Console_Init+0x1fc>)
 8000bdc:	60da      	str	r2, [r3, #12]
	// Activer la transmision : ecrire '1' sur le bit b3 de USART2_CR1
	USART2->CR1 |= (1<<3);
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000be4:	2108      	movs	r1, #8
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
	// Activer la reception : ecrire '1' sur le bit b2 de USART2_CR1
	USART2->CR1 |= (1<<2);
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
	// Action la demande interruption de evenement RXNE : caractere recu
	//USART2->CR1 |= USART_CR1_RXNEIE;
	// Configuration de RX sur le canal 5 du DMA
	// Activer horloge du DMA
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <BSP_Console_Init+0x1d4>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	615a      	str	r2, [r3, #20]
	// Reinitialisation de la configuration du canal 5 du DMA1
	DMA1_Channel5->CCR = 0x00000000;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
	// Definir la direction Peripherique -> Memoire
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c0e:	2110      	movs	r1, #16
 8000c10:	438a      	bics	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
	// Definir USART2 RDR comme etant le peripherique
	DMA1_Channel5->CPAR = (uint32_t)&USART2->RDR;
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c16:	4a2a      	ldr	r2, [pc, #168]	; (8000cc0 <BSP_Console_Init+0x204>)
 8000c18:	609a      	str	r2, [r3, #8]
	// Indiquer que la taille des donnees du peripherique est de 8 bits (octet)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	601a      	str	r2, [r3, #0]
	// Desactiver auto-incrementation de Adresse du peripherique
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	438a      	bics	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
	// Definir le tableau rx_dma_buffer comme etant la memoire
	DMA1_Channel5->CMAR = (uint32_t)rx_dma_buffer;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c30:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <BSP_Console_Init+0x208>)
 8000c32:	60da      	str	r2, [r3, #12]
	// Indiquer que la taille des donnees de la memoire est de 8 bits (octet)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	601a      	str	r2, [r3, #0]
	// activer auto-incrementation de Adresse de la memoire
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
	// Definir la taille de la memoire tampon
	DMA1_Channel5->CNDTR = 8;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	605a      	str	r2, [r3, #4]
	// Activer le mode ciculaire du DMA
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c54:	2120      	movs	r1, #32
 8000c56:	430a      	orrs	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]
	// Activation des interruptions DMA HT & TC
	DMA1_Channel5->CCR |= DMA_CCR_HTIE | DMA_CCR_TCIE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c60:	2106      	movs	r1, #6
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
	// Activer le canal 5 du DMA
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <BSP_Console_Init+0x200>)
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	// Activer la requete DMA pour la reception USART RX
	USART2->CR3 |= USART_CR3_DMAR;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	609a      	str	r2, [r3, #8]
	// activer le peripherique USART2 en dernier
	// mettre a '1' le bit bit b0 de USART2_CR1
	USART2->CR1 |= (1<<0);
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <BSP_Console_Init+0x1f0>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	fffff7ff 	.word	0xfffff7ff
 8000c98:	fffffbff 	.word	0xfffffbff
 8000c9c:	fffffdff 	.word	0xfffffdff
 8000ca0:	ffff7fff 	.word	0xffff7fff
 8000ca4:	ffffbfff 	.word	0xffffbfff
 8000ca8:	ffffdfff 	.word	0xffffdfff
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	fffdffff 	.word	0xfffdffff
 8000cb4:	fffeffff 	.word	0xfffeffff
 8000cb8:	00000341 	.word	0x00000341
 8000cbc:	40020058 	.word	0x40020058
 8000cc0:	40004424 	.word	0x40004424
 8000cc4:	20000028 	.word	0x20000028

08000cc8 <BSP_TIMER_Timebase_Init>:
* TIM6 cadenser a 48MHz
* Prescaler = 48000 -> periode de comptage = 1ms
* Auto-reload = 1000 -> periode de debordement = 1000ms
*/
void BSP_TIMER_Timebase_Init()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	// activer horloge du peripherique TIM6
	// mettre a '1' le bit b4 (TIM6EN) du registre RCC_APB1ENR
	// voir page 131 du manuel de reference
	RCC->APB1ENR |= (1<<4); // le bit b4 est defini comme etant RCC_APB1ENR_TIM6EN
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <BSP_TIMER_Timebase_Init+0x54>)
 8000cce:	69da      	ldr	r2, [r3, #28]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <BSP_TIMER_Timebase_Init+0x54>)
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	61da      	str	r2, [r3, #28]
	// Faire un Reset de configuration du TIM6 : mise a zero des registres
	// TIM6_CR1 et TIM6_CR2
	// voir page 543 a 544 du manuel de reference
	TIM6->CR1 = 0x0000;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
	// Configuration frequence de comptage
	// Prescaler : registre TIM6_PSC
	// Fck = 48MHz -> /48000 = 1KHz frequence de comptage
	TIM6->PSC = (uint16_t) 48000 -1;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <BSP_TIMER_Timebase_Init+0x5c>)
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
	// Configuration periode des evenements
	// Prescaler : registre TIM6_ARR
	// 1000 /10 = 100Hz
	TIM6->ARR = (uint16_t) 1000 -1;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <BSP_TIMER_Timebase_Init+0x60>)
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
	// Activation auto-reload preload : prechargement
	// mettre a '1' le bit b7 du registre TIM6_CR1
	TIM6->CR1 |= (1<<7);
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
	// Activation de la demande interruption de debordement
	// mettre a '1' le bit b0 du registre TIM6_DIER
	// page 544
	TIM6->DIER|= (1<<0);
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	60da      	str	r2, [r3, #12]
	// Demarrer le Timer TIM6
	// Mettre a '1' le bit b0 du registre TIM6_CR1
	TIM6->CR1 |= (1<<0);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <BSP_TIMER_Timebase_Init+0x58>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40001000 	.word	0x40001000
 8000d24:	0000bb7f 	.word	0x0000bb7f
 8000d28:	000003e7 	.word	0x000003e7

08000d2c <BSP_NVIC_Init>:
/*
* BSP_NVIC_Init()
* Configuration du controleur NVIC pour autoriser et accepter les sources interruptions activer
*/
void BSP_NVIC_Init()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	// Mettre en priorite maximuim les lignes interruptions externes EXTI 4 a 15
	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2007      	movs	r0, #7
 8000d34:	f7ff fe54 	bl	80009e0 <__NVIC_SetPriority>
	// Autoriser les lignes interruptions externes EXTI 4 a 15
	// le bouton Bleu est sur PC13 (ligne 13)
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d38:	2007      	movs	r0, #7
 8000d3a:	f7ff fe37 	bl	80009ac <__NVIC_EnableIRQ>
	// Mettre la priorite 1 pour les interruptions du TIM6
	NVIC_SetPriority(TIM6_DAC_IRQn, 1);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2011      	movs	r0, #17
 8000d42:	f7ff fe4d 	bl	80009e0 <__NVIC_SetPriority>
	// Autoriser les demandes interruptions du TIM6
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d46:	2011      	movs	r0, #17
 8000d48:	f7ff fe30 	bl	80009ac <__NVIC_EnableIRQ>
	// Definir le niveau de priorité 1 pour les interruptions DMA1_Channel5
	NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f7ff fe46 	bl	80009e0 <__NVIC_SetPriority>
	// Autoriser les demandes interruptions du DMA1_Channel5 interrupts
	NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000d54:	200b      	movs	r0, #11
 8000d56:	f7ff fe29 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490e      	ldr	r1, [pc, #56]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d8a:	f000 f813 	bl	8000db4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d8e:	f000 f8d5 	bl	8000f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d92:	f7ff fa45 	bl	8000220 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000da4:	08000fd4 	.word	0x08000fd4
  ldr r2, =_sbss
 8000da8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000dac:	2000003c 	.word	0x2000003c

08000db0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_COMP_IRQHandler>
	...

08000db4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SystemInit+0x70>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <SystemInit+0x70>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <SystemInit+0x70>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <SystemInit+0x70>)
 8000dca:	4917      	ldr	r1, [pc, #92]	; (8000e28 <SystemInit+0x74>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <SystemInit+0x70>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <SystemInit+0x70>)
 8000dd6:	4915      	ldr	r1, [pc, #84]	; (8000e2c <SystemInit+0x78>)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <SystemInit+0x70>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <SystemInit+0x70>)
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <SystemInit+0x7c>)
 8000de4:	400a      	ands	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <SystemInit+0x70>)
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <SystemInit+0x70>)
 8000dee:	4911      	ldr	r1, [pc, #68]	; (8000e34 <SystemInit+0x80>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <SystemInit+0x70>)
 8000df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <SystemInit+0x70>)
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SystemInit+0x70>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <SystemInit+0x70>)
 8000e06:	490c      	ldr	r1, [pc, #48]	; (8000e38 <SystemInit+0x84>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SystemInit+0x70>)
 8000e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SystemInit+0x70>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	438a      	bics	r2, r1
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <SystemInit+0x70>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	08ffb80c 	.word	0x08ffb80c
 8000e2c:	fef6ffff 	.word	0xfef6ffff
 8000e30:	fffbffff 	.word	0xfffbffff
 8000e34:	ffc0ffff 	.word	0xffc0ffff
 8000e38:	fffcfe2c 	.word	0xfffcfe2c

08000e3c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <SystemCoreClockUpdate+0xec>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	220c      	movs	r2, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d007      	beq.n	8000e72 <SystemCoreClockUpdate+0x36>
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d009      	beq.n	8000e7a <SystemCoreClockUpdate+0x3e>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d148      	bne.n	8000efc <SystemCoreClockUpdate+0xc0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000e6c:	4a30      	ldr	r2, [pc, #192]	; (8000f30 <SystemCoreClockUpdate+0xf4>)
 8000e6e:	601a      	str	r2, [r3, #0]
      break;
 8000e70:	e048      	b.n	8000f04 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <SystemCoreClockUpdate+0xf4>)
 8000e76:	601a      	str	r2, [r3, #0]
      break;
 8000e78:	e044      	b.n	8000f04 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <SystemCoreClockUpdate+0xec>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	23f0      	movs	r3, #240	; 0xf0
 8000e80:	039b      	lsls	r3, r3, #14
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <SystemCoreClockUpdate+0xec>)
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	025b      	lsls	r3, r3, #9
 8000e8e:	4013      	ands	r3, r2
 8000e90:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	0c9b      	lsrs	r3, r3, #18
 8000e96:	3302      	adds	r3, #2
 8000e98:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SystemCoreClockUpdate+0xec>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d10a      	bne.n	8000ec6 <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000eb0:	6839      	ldr	r1, [r7, #0]
 8000eb2:	481f      	ldr	r0, [pc, #124]	; (8000f30 <SystemCoreClockUpdate+0xf4>)
 8000eb4:	f7ff f928 	bl	8000108 <__udivsi3>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	001a      	movs	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	435a      	muls	r2, r3
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000ec2:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000ec4:	e01e      	b.n	8000f04 <SystemCoreClockUpdate+0xc8>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	23c0      	movs	r3, #192	; 0xc0
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10a      	bne.n	8000ee6 <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <SystemCoreClockUpdate+0xf8>)
 8000ed4:	f7ff f918 	bl	8000108 <__udivsi3>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	001a      	movs	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	435a      	muls	r2, r3
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000ee2:	601a      	str	r2, [r3, #0]
      break;
 8000ee4:	e00e      	b.n	8000f04 <SystemCoreClockUpdate+0xc8>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <SystemCoreClockUpdate+0xf4>)
 8000eea:	f7ff f90d 	bl	8000108 <__udivsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	435a      	muls	r2, r3
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000ef8:	601a      	str	r2, [r3, #0]
      break;
 8000efa:	e003      	b.n	8000f04 <SystemCoreClockUpdate+0xc8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <SystemCoreClockUpdate+0xf4>)
 8000f00:	601a      	str	r2, [r3, #0]
      break;
 8000f02:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <SystemCoreClockUpdate+0xec>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SystemCoreClockUpdate+0xfc>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	40da      	lsrs	r2, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <SystemCoreClockUpdate+0xf0>)
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b004      	add	sp, #16
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	007a1200 	.word	0x007a1200
 8000f34:	02dc6c00 	.word	0x02dc6c00
 8000f38:	08000fbc 	.word	0x08000fbc

08000f3c <__libc_init_array>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	2600      	movs	r6, #0
 8000f40:	4d0c      	ldr	r5, [pc, #48]	; (8000f74 <__libc_init_array+0x38>)
 8000f42:	4c0d      	ldr	r4, [pc, #52]	; (8000f78 <__libc_init_array+0x3c>)
 8000f44:	1b64      	subs	r4, r4, r5
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	42a6      	cmp	r6, r4
 8000f4a:	d109      	bne.n	8000f60 <__libc_init_array+0x24>
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	f000 f819 	bl	8000f84 <_init>
 8000f52:	4d0a      	ldr	r5, [pc, #40]	; (8000f7c <__libc_init_array+0x40>)
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <__libc_init_array+0x44>)
 8000f56:	1b64      	subs	r4, r4, r5
 8000f58:	10a4      	asrs	r4, r4, #2
 8000f5a:	42a6      	cmp	r6, r4
 8000f5c:	d105      	bne.n	8000f6a <__libc_init_array+0x2e>
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	00b3      	lsls	r3, r6, #2
 8000f62:	58eb      	ldr	r3, [r5, r3]
 8000f64:	4798      	blx	r3
 8000f66:	3601      	adds	r6, #1
 8000f68:	e7ee      	b.n	8000f48 <__libc_init_array+0xc>
 8000f6a:	00b3      	lsls	r3, r6, #2
 8000f6c:	58eb      	ldr	r3, [r5, r3]
 8000f6e:	4798      	blx	r3
 8000f70:	3601      	adds	r6, #1
 8000f72:	e7f2      	b.n	8000f5a <__libc_init_array+0x1e>
 8000f74:	08000fcc 	.word	0x08000fcc
 8000f78:	08000fcc 	.word	0x08000fcc
 8000f7c:	08000fcc 	.word	0x08000fcc
 8000f80:	08000fd0 	.word	0x08000fd0

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
