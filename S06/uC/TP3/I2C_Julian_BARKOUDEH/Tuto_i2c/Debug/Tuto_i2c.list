
Tuto_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000073b  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000250  00000000  00000000  00010b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00010d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00010e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000113b0  00000000  00000000  00010ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000bad  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005a43d  00000000  00000000  00022e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000180  00000000  00000000  0007d2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003a0 	.word	0x080003a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080003a0 	.word	0x080003a0

08000108 <main>:
#include "delay.h"
 #include "main.h"
static void SystemClock_Config(void);
static uint8_t wait_for_flags();
uint16_t rx_data[2];
int main(void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	// Définir l'adresse du composant VEML7700
	I2C1->CR2 &= ~I2C_CR2_SADD_Msk;
 800010c:	4b22      	ldr	r3, [pc, #136]	; (8000198 <main+0x90>)
 800010e:	685a      	ldr	r2, [r3, #4]
 8000110:	4b21      	ldr	r3, [pc, #132]	; (8000198 <main+0x90>)
 8000112:	0a92      	lsrs	r2, r2, #10
 8000114:	0292      	lsls	r2, r2, #10
 8000116:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((0x10 <<1U) <<I2C_CR2_SADD_Pos);
 8000118:	4b1f      	ldr	r3, [pc, #124]	; (8000198 <main+0x90>)
 800011a:	685a      	ldr	r2, [r3, #4]
 800011c:	4b1e      	ldr	r3, [pc, #120]	; (8000198 <main+0x90>)
 800011e:	2120      	movs	r1, #32
 8000120:	430a      	orrs	r2, r1
 8000122:	605a      	str	r2, [r3, #4]
	// Mettre I2C en mode Write mode
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000124:	4b1c      	ldr	r3, [pc, #112]	; (8000198 <main+0x90>)
 8000126:	685a      	ldr	r2, [r3, #4]
 8000128:	4b1b      	ldr	r3, [pc, #108]	; (8000198 <main+0x90>)
 800012a:	491c      	ldr	r1, [pc, #112]	; (800019c <main+0x94>)
 800012c:	400a      	ands	r2, r1
 800012e:	605a      	str	r2, [r3, #4]
	// Transfert NBYTES = 3, pas de AUTOEND
	I2C1->CR2 &= ~I2C_CR2_NBYTES;
 8000130:	4b19      	ldr	r3, [pc, #100]	; (8000198 <main+0x90>)
 8000132:	685a      	ldr	r2, [r3, #4]
 8000134:	4b18      	ldr	r3, [pc, #96]	; (8000198 <main+0x90>)
 8000136:	491a      	ldr	r1, [pc, #104]	; (80001a0 <main+0x98>)
 8000138:	400a      	ands	r2, r1
 800013a:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (3 <<16U);
 800013c:	4b16      	ldr	r3, [pc, #88]	; (8000198 <main+0x90>)
 800013e:	685a      	ldr	r2, [r3, #4]
 8000140:	4b15      	ldr	r3, [pc, #84]	; (8000198 <main+0x90>)
 8000142:	21c0      	movs	r1, #192	; 0xc0
 8000144:	0289      	lsls	r1, r1, #10
 8000146:	430a      	orrs	r2, r1
 8000148:	605a      	str	r2, [r3, #4]
	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 800014a:	4b13      	ldr	r3, [pc, #76]	; (8000198 <main+0x90>)
 800014c:	685a      	ldr	r2, [r3, #4]
 800014e:	4b12      	ldr	r3, [pc, #72]	; (8000198 <main+0x90>)
 8000150:	4914      	ldr	r1, [pc, #80]	; (80001a4 <main+0x9c>)
 8000152:	400a      	ands	r2, r1
 8000154:	605a      	str	r2, [r3, #4]
	// Demarrer la transaction I2C
	I2C1->CR2 |= I2C_CR2_START;
 8000156:	4b10      	ldr	r3, [pc, #64]	; (8000198 <main+0x90>)
 8000158:	685a      	ldr	r2, [r3, #4]
 800015a:	4b0f      	ldr	r3, [pc, #60]	; (8000198 <main+0x90>)
 800015c:	2180      	movs	r1, #128	; 0x80
 800015e:	0189      	lsls	r1, r1, #6
 8000160:	430a      	orrs	r2, r1
 8000162:	605a      	str	r2, [r3, #4]
	wait_for_flags(); // TXIS #1
 8000164:	f000 f820 	bl	80001a8 <wait_for_flags>
	// Envoyer adresse du registre
	I2C1->TXDR = 0x00;
 8000168:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <main+0x90>)
 800016a:	2200      	movs	r2, #0
 800016c:	629a      	str	r2, [r3, #40]	; 0x28
	wait_for_flags(); // attente TXIS #2
 800016e:	f000 f81b 	bl	80001a8 <wait_for_flags>
	// Envoyer le premier octet (LSB)
	I2C1->TXDR = 0x00;
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <main+0x90>)
 8000174:	2200      	movs	r2, #0
 8000176:	629a      	str	r2, [r3, #40]	; 0x28
	wait_for_flags(); // attente TXIS #3
 8000178:	f000 f816 	bl	80001a8 <wait_for_flags>
	// Envoyer le deuxième octet (MSB)
	I2C1->TXDR = 0x00;
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <main+0x90>)
 800017e:	2200      	movs	r2, #0
 8000180:	629a      	str	r2, [r3, #40]	; 0x28
	wait_for_flags(); // attente de TC
 8000182:	f000 f811 	bl	80001a8 <wait_for_flags>
	// Générer une condition STOP
	I2C1->CR2 |= I2C_CR2_STOP;
 8000186:	4b04      	ldr	r3, [pc, #16]	; (8000198 <main+0x90>)
 8000188:	685a      	ldr	r2, [r3, #4]
 800018a:	4b03      	ldr	r3, [pc, #12]	; (8000198 <main+0x90>)
 800018c:	2180      	movs	r1, #128	; 0x80
 800018e:	01c9      	lsls	r1, r1, #7
 8000190:	430a      	orrs	r2, r1
 8000192:	605a      	str	r2, [r3, #4]
	while(1) {
 8000194:	e7fe      	b.n	8000194 <main+0x8c>
 8000196:	46c0      	nop			; (mov r8, r8)
 8000198:	40005400 	.word	0x40005400
 800019c:	fffffbff 	.word	0xfffffbff
 80001a0:	ff00ffff 	.word	0xff00ffff
 80001a4:	fdffffff 	.word	0xfdffffff

080001a8 <wait_for_flags>:
	}
}*/
//******************************Partie 6 ****************
/* * Attendre et notifier les drapeaux etats du bus I2C
 * fonction aide pour debug I2C */
static uint8_t wait_for_flags(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 80001ae:	1dfb      	adds	r3, r7, #7
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
	// Reset des drapeaux STOPF et NACKF
	I2C1->ICR |= I2C_ICR_STOPCF;
 80001b4:	4b23      	ldr	r3, [pc, #140]	; (8000244 <wait_for_flags+0x9c>)
 80001b6:	69da      	ldr	r2, [r3, #28]
 80001b8:	4b22      	ldr	r3, [pc, #136]	; (8000244 <wait_for_flags+0x9c>)
 80001ba:	2120      	movs	r1, #32
 80001bc:	430a      	orrs	r2, r1
 80001be:	61da      	str	r2, [r3, #28]
	I2C1->ICR |= I2C_ICR_NACKCF;
 80001c0:	4b20      	ldr	r3, [pc, #128]	; (8000244 <wait_for_flags+0x9c>)
 80001c2:	69da      	ldr	r2, [r3, #28]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <wait_for_flags+0x9c>)
 80001c6:	2110      	movs	r1, #16
 80001c8:	430a      	orrs	r2, r1
 80001ca:	61da      	str	r2, [r3, #28]
	while(exit == 0) {
 80001cc:	e030      	b.n	8000230 <wait_for_flags+0x88>
		// TXIS -> PA0 // Quitter attente si TXIS passe a '1'
		if ((I2C1->ISR & I2C_ISR_TXIS) != 0) {
 80001ce:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <wait_for_flags+0x9c>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	2202      	movs	r2, #2
 80001d4:	4013      	ands	r3, r2
 80001d6:	d007      	beq.n	80001e8 <wait_for_flags+0x40>
			GPIOA->BSRR = GPIO_BSRR_BS_0;
 80001d8:	2390      	movs	r3, #144	; 0x90
 80001da:	05db      	lsls	r3, r3, #23
 80001dc:	2201      	movs	r2, #1
 80001de:	619a      	str	r2, [r3, #24]
			// mise a '1' de PA0
			exit = 1;
 80001e0:	1dfb      	adds	r3, r7, #7
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
 80001e6:	e004      	b.n	80001f2 <wait_for_flags+0x4a>
		}
		else GPIOA->BSRR = GPIO_BSRR_BR_0;
 80001e8:	2390      	movs	r3, #144	; 0x90
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	2280      	movs	r2, #128	; 0x80
 80001ee:	0252      	lsls	r2, r2, #9
 80001f0:	619a      	str	r2, [r3, #24]
		// mise a '0' de PA0
		// TC -> PA4
		// Quitter attente si TC passe a '1'
		if ((I2C1->ISR & I2C_ISR_TC) != 0) {
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <wait_for_flags+0x9c>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	2240      	movs	r2, #64	; 0x40
 80001f8:	4013      	ands	r3, r2
 80001fa:	d004      	beq.n	8000206 <wait_for_flags+0x5e>
			GPIOA->BSRR = GPIO_BSRR_BS_4;
 80001fc:	2390      	movs	r3, #144	; 0x90
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	2210      	movs	r2, #16
 8000202:	619a      	str	r2, [r3, #24]
 8000204:	e004      	b.n	8000210 <wait_for_flags+0x68>
			// mise a '1' de PA4 exit = 3;
			} else GPIOA->BSRR = GPIO_BSRR_BR_4;
 8000206:	2390      	movs	r3, #144	; 0x90
 8000208:	05db      	lsls	r3, r3, #23
 800020a:	2280      	movs	r2, #128	; 0x80
 800020c:	0352      	lsls	r2, r2, #13
 800020e:	619a      	str	r2, [r3, #24]
		// mise a '0' de PA4
		// STOPF-> PC1
		// Quitter attente si STOPF passe a '1'
		if ((I2C1->ISR & I2C_ISR_STOPF) != 0) {
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <wait_for_flags+0x9c>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	2220      	movs	r2, #32
 8000216:	4013      	ands	r3, r2
 8000218:	d006      	beq.n	8000228 <wait_for_flags+0x80>
			GPIOC->BSRR = GPIO_BSRR_BS_1;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <wait_for_flags+0xa0>)
 800021c:	2202      	movs	r2, #2
 800021e:	619a      	str	r2, [r3, #24]
			// mise a '1' de PC1
			exit = 2;
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	2202      	movs	r2, #2
 8000224:	701a      	strb	r2, [r3, #0]
 8000226:	e003      	b.n	8000230 <wait_for_flags+0x88>
		}
		else GPIOC->BSRR = GPIO_BSRR_BR_1;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <wait_for_flags+0xa0>)
 800022a:	2280      	movs	r2, #128	; 0x80
 800022c:	0292      	lsls	r2, r2, #10
 800022e:	619a      	str	r2, [r3, #24]
	while(exit == 0) {
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d0ca      	beq.n	80001ce <wait_for_flags+0x26>
		// mise a '0' de PC1
		// Ajouter autres sortie de drapeaux // ...
		}
return exit;
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40005400 	.word	0x40005400
 8000248:	48000800 	.word	0x48000800

0800024c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800025a:	e7fe      	b.n	800025a <HardFault_Handler+0x4>

0800025c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	af00      	add	r7, sp, #0
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490e      	ldr	r1, [pc, #56]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0b      	ldr	r4, [pc, #44]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a6:	f000 f813 	bl	80002d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f855 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff2b 	bl	8000108 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_COMP_IRQHandler>
	...

080002d0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80002d4:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <SystemInit+0x70>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <SystemInit+0x70>)
 80002da:	2101      	movs	r1, #1
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <SystemInit+0x70>)
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <SystemInit+0x70>)
 80002e6:	4917      	ldr	r1, [pc, #92]	; (8000344 <SystemInit+0x74>)
 80002e8:	400a      	ands	r2, r1
 80002ea:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <SystemInit+0x70>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <SystemInit+0x70>)
 80002f2:	4915      	ldr	r1, [pc, #84]	; (8000348 <SystemInit+0x78>)
 80002f4:	400a      	ands	r2, r1
 80002f6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <SystemInit+0x70>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <SystemInit+0x70>)
 80002fe:	4913      	ldr	r1, [pc, #76]	; (800034c <SystemInit+0x7c>)
 8000300:	400a      	ands	r2, r1
 8000302:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <SystemInit+0x70>)
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <SystemInit+0x70>)
 800030a:	4911      	ldr	r1, [pc, #68]	; (8000350 <SystemInit+0x80>)
 800030c:	400a      	ands	r2, r1
 800030e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SystemInit+0x70>)
 8000312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SystemInit+0x70>)
 8000316:	210f      	movs	r1, #15
 8000318:	438a      	bics	r2, r1
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <SystemInit+0x70>)
 800031e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <SystemInit+0x70>)
 8000322:	490c      	ldr	r1, [pc, #48]	; (8000354 <SystemInit+0x84>)
 8000324:	400a      	ands	r2, r1
 8000326:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <SystemInit+0x70>)
 800032a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SystemInit+0x70>)
 800032e:	2101      	movs	r1, #1
 8000330:	438a      	bics	r2, r1
 8000332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <SystemInit+0x70>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	08ffb80c 	.word	0x08ffb80c
 8000348:	fef6ffff 	.word	0xfef6ffff
 800034c:	fffbffff 	.word	0xfffbffff
 8000350:	ffc0ffff 	.word	0xffc0ffff
 8000354:	fffcfe2c 	.word	0xfffcfe2c

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	2600      	movs	r6, #0
 800035c:	4d0c      	ldr	r5, [pc, #48]	; (8000390 <__libc_init_array+0x38>)
 800035e:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	2600      	movs	r6, #0
 800036a:	f000 f819 	bl	80003a0 <_init>
 800036e:	4d0a      	ldr	r5, [pc, #40]	; (8000398 <__libc_init_array+0x40>)
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <__libc_init_array+0x44>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	00b3      	lsls	r3, r6, #2
 800037e:	58eb      	ldr	r3, [r5, r3]
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	00b3      	lsls	r3, r6, #2
 8000388:	58eb      	ldr	r3, [r5, r3]
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
