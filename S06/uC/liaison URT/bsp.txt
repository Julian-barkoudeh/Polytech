/*
 *  bsp.c
 * Created on: 14 févr. 2021 * Author: darga
 */

#include "bsp.h"
/*
 * BSP_LED_Init()
 * Initialise la broche PA5 (LED) en sortie, mode Push-pull, vitesse de rafraichissement High-Speed, pas de resistance de tirage
 * Etat initial mus a '0'
 */
void BSP_LED_Init()
{
	//activation de horloge du peripherique GPIOA
	// mettre le bit b17 du registre RCC_AHBENR a '1'
	// voir page 128 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	// le bit b17 de RCC_AHBENR est egalement defini = RCC_AHBENR_GPIOAEN dans le fichier stm32f0xx.h
	RCC->AHBENR |= (1<<17);
	// ou
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

	// Configurer la broche PA5 en sortie
	// Ecrire "01" sur les bits b11b10 du registre (GPIOA_MODER)
	GPIOA->MODER &= ~(1<<11); GPIOA->MODER |= (1<<10);
	// Choisir option electronique Push-pull pour la sortie PA5
	// Ecrire "0" sur le bit b5 du registre (GPIOA_OTYPER)
	GPIOA->OTYPER &= ~(1<<5);
	// Choisir option electronique high speed pour la vitesse de rafraichissement pour la sortie PA5
	// Ecrire "11" sur les bits b11b10 du registre (GPIOx_OSPEEDR)
	GPIOA->OSPEEDR |= (1<<11); GPIOA->OSPEEDR |= (1<<10);
	// Deactiver les resistances de tirages (Pull-up ou Pull-down) pour la sortie PA5
	// Ecrire "00" sur les bits b11b10 du registre (GPIOx_PUPDR)
	GPIOA->PUPDR &= ~(1<<11);
	GPIOA->PUPDR &= ~(1<<10);
	// Mettre l'état initial de PA5 sur OFF
	GPIOA->ODR &= ~(1<<5);
}
/*
* BSP_LED_On()
* Allume la LED lier a la broche PA5
*/
void BSP_LED_On()
{
	// Ecrire "1" sur le bit b5 du registre (GPIOA_ODR)
	GPIOA->ODR |= (1<<5);
}
/*
 * BSP_LED_Off()
 * Eteint la LED lier a la broche PA5
 */
void BSP_LED_Off()
{
	// Ecrire "0" sur le bit b5 du registre (GPIOA_ODR)
	GPIOA->ODR &= ~(1<<5);
}
/*
  BSP_LED_Toggle() * Change etat de la LED lier a la broche PA5 */
void BSP_LED_Toggle()
{
	GPIOA->ODR ^= (1<<5);


/*
 * BSP_PB_Init()
 * Initialise la broche PC13 (Bouton poussoir) en input sans les resistance de tirages Pull-up/Pull-down
 */
}
void BSP_PB_Init()
{
	//activation de horloge du peripherique GPIOC
	// mettre le bit b19 du registre RCC_AHBENR a '1'
	RCC->AHBENR |= (1<<19);

	// Configurer la broche PC13 en Input
	// Ecrire "00" sur les bits b27b26 du registre (GPIOC_MODER)
	GPIOC->MODER &= ~(1<<27);
	GPIOC->MODER &= ~(1<<26);
	// Deactiver les resistances de tirages (Pull-up ou Pull-down) pour la sortie PA5
	// Ecrire "00" sur les bits b27b26 du registre (GPIOC_PUPDR)
	GPIOC->PUPDR &= ~(1<<27);
	GPIOC->PUPDR &= ~(1<<26);
}
	/*
	 * BSP_PB_GetState()
	 * Renvoi etat du bouton (0=Non Appuyer, 1=Appuyer)
	 */

uint8_t BSP_PB_GetState()
	{
		uint8_t state;
	if ((GPIOC->IDR & (1<<13)) == (1<<13))
	{
		state = 0;
	}
	else
	{
		state = 1;
	}
	return state;
}

/*------------------------------
 * Fonctions pour PB3
 */
void BSP_LED_Init_PB3()
{
	//activation de horloge du peripherique GPIOA
	// mettre le bit b17 du registre RCC_AHBENR a '1'
	// voir page 128 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	// le bit b17 de RCC_AHBENR est egalement defini = RCC_AHBENR_GPIOAEN dans le fichier stm32f0xx.h
	RCC->AHBENR |= (1<<18);
	// ou
	//RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

	// Configurer la broche PA5 en sortie
	// Ecrire "01" sur les bits b11b10 du registre (GPIOA_MODER)
	GPIOB->MODER &= ~(1<<7);
	GPIOB->MODER |= (1<<6);
	// Choisir option electronique Push-pull pour la sortie PA5
	// Ecrire "0" sur le bit b5 du registre (GPIOA_OTYPER)
	GPIOB->OTYPER &= ~(1<<3);
	// Choisir option electronique high speed pour la vitesse de rafraichissement pour la sortie PA5
	// Ecrire "11" sur les bits b11b10 du registre (GPIOx_OSPEEDR)
	GPIOB->OSPEEDR |= (1<<7);
	GPIOB->OSPEEDR |= (1<<6);
	// Deactiver les resistances de tirages (Pull-up ou Pull-down) pour la sortie PA5
	// Ecrire "00" sur les bits b11b10 du registre (GPIOx_PUPDR)
	GPIOB->PUPDR &= ~(1<<7);
	GPIOB->PUPDR &= ~(1<<6);
	// Mettre l'état initial de PA5 sur OFF
	GPIOB->ODR &= ~(1<<3);
}

	/*
	 * BSP_PB_GetState()
	 * Renvoi etat du bouton (0=Non Appuyer, 1=Appuyer)
	 */

/*
* BSP_LED_On()
* Allume la LED lier a la broche PB3
*/
void BSP_LED_On_PB3()
{
	// Ecrire "1" sur le bit b5 du registre (GPIOA_ODR)
	GPIOB->ODR |= (1<<3);
}
/*
 * BSP_LED_Off()
 * Eteint la LED lier a la broche PB3
 */
void BSP_LED_Off_PB3()
{
	// Ecrire "0" sur le bit b5 du registre (GPIOA_ODR)
	GPIOB->ODR &= ~(1<<3);
}
/*
  BSP_LED_Toggle() * Change etat de la LED lier a la broche PA5 */
void BSP_LED_Toggle_PB3()
{
	GPIOB->ODR ^= (1<<3);
}

/*
 * BSP_PB_Init()
 * Initialise la broche PC18 (Bouton poussoir) en input sans les resistance de tirages Pull-up/Pull-down
 */

/*-----------------------------------------------------------------------------------
 * Codes pour liaison URT
 */

/*
 * BSP_Console_Init()
 * USART2 @ 115200 Full Duplex
 * 1 start - 8-bit - 1 stop
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1) */
void BSP_Console_Init()
{
	//activer horloge du peripherique GPIOA
	//mettre le bit b17 du registre RCC_AHBENR a '1'
	// voir page 128 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	//le bit b17 de RCC_AHBENR est egalement defini = RCC_AHBENR_GPIOAEN dans le fichier stm32f0xx.h
	RCC->AHBENR |= (1<<17); // ou RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

	// Choisir le mode Alternate Function (AF) pour les broches PA2 et PA3
	// pour PA2 : ecrire "10" sur les bits b5b4 du registre GPIOA_MODER
	GPIOA->MODER |=(1<<5);
	GPIOA->MODER &=~(1<<4);
	// pour PA3 : ecrire "10" sur les bits b7b6 du registreGPIOA_MODER
	GPIOA->MODER |=(1<<7);
	GPIOA->MODER &=~(1<<6);
	// Choisir la fonction AF1 (USART2) pour les broches PA2 et PA3
	// pour PA2 : ecrire "0001" sur les bits b11b10b9b8 du registre GPIOA_AFRL = GPIO->AFR[0]
	GPIOA->AFR[0] &= ~(1<<11);
	GPIOA->AFR[0] &= ~(1<<10);
	GPIOA->AFR[0] &= ~(1<<9);
	GPIOA->AFR[0] |= (1<<8);
	// Choisir la fonction AF1 (USART2) pour les broches PA2 et PA3
	// pour PA3 : ecrire "0001" sur les bits b15b14b13b12 du registre GPIOA_AFRL = GPIO->AFR[0]
	GPIOA->AFR[0] &= ~(1<<15);
	GPIOA->AFR[0] &= ~(1<<14);
	GPIOA->AFR[0] &= ~(1<<13);
	GPIOA->AFR[0] |= (1<<12);
	//activer horloge du peripherique USART2
	// mettre '1' le bit b17 du registre (RCC_APB1ENR)
	// voir page 131 du manuel technique (User Manuel) du Microcontrôleur STM32F072RB
	RCC -> APB1ENR |= (1<<17);
	//Reset de la configuration de USART2 : Mise a zero des registres de control de USART2
	//USART2_CR1, USART2_CR2 , USART2_CR3
	// On utilise les valeurs par defaut /
	// 8-bits de donnees
	// 1 bit START
	// 1 bit STOP
	// desactivation de CTS/RTS
	USART2->CR1 = 0x00000000;
	USART2->CR2 = 0x00000000;
	USART2->CR3 = 0x00000000;
	// Choisir la source PCLK (APB1) comme source horloge de USART2 : Valeur par defaut
	// PCLK -> 48 MHz
	// mettre "00" sur les bits b17b16 du registre (RCC_CFGR3)
	// voir page 140 du reference manual
	RCC->CFGR3 &= ~(1<<17);
	RCC->CFGR3 &= ~(1<<16);
	// Configuration du Baud Rate = 115200
	// sans oversampling 8 bits (OVER8=0) et Fck=48MHz, USARTDIV = 48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% erreur
	// avec oversampling 8 bits (OVER8=1) and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (Meilleur choix)
	// choix oversampling 8 bits (OVER8=1)
	// mettre a '1' le bit b15 de USART2_CR1
	USART2->CR1 |= (1<<15);
	// ecrire la valeur du Baud Rate dans le registre USART2_BRR
	USART2->BRR = 833;
	// Activer la transmision : ecrire '1' sur le bit b3 de USART2_CR1
	USART2->CR1 |= (1<<3);
	// Activer la reception : ecrire '1' sur le bit b2 de USART2_CR1
	USART2->CR1 |= (1<<2);
	// activer le peripherique USART2 en dernier
	// mettre a '1' le bit bit b0 de USART2_CR1
	USART2->CR1 |= (1<<0);
}

